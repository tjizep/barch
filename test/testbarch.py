import time
import barch
barch.setRoute(0,"127.0.0.1",14500)
r = barch.getRoute(0)
assert(r.host.s() == "127.0.0.1")
assert(r.port.i() == 14500)
barch.removeRoute(0)
r = barch.getRoute(0)
assert(r.host.s() == "" and r.port.i()==0)
barch.clear()
s = barch.size()
assert(s == 0)
k = barch.KeyValue()
h = barch.HashSet()
k.set("1","one")
k.set("2","two")
k.set("3","three")
assert(k.get("1") == "one")
k.erase("1")
s = barch.size()
assert(s == 2)
barch.save()
barch.clear()
barch.save()
assert(0 == barch.size())
h.set("k3",["f1","v1","f2","v2"])
assert(h.ttl("k3",["f1"])[0].i() == -1)
s = barch.size()
assert(h.remove("k3", ["f1"]).i() == 1)
assert(s -1 == barch.size())
assert(h.mget("k3",["f2"])[0].t() == 'string')
h.set("kxp",["f1","v1","f2","v2"])
h.expire("kxp",["10", "NX"],["f1","f2"])
assert(h.mget("kxp",["f1","f2"])[0].s() == "v1")
assert(h.ttl("kxp",["f1"])[0].i() >= 9)
s = int(time.time())
assert(h.expireat("kxp",s,"XX",["f1"])[0].i()==1)
h.set("kn",["f1","0","f2","1"])
assert(h.incrby("kn","f1",1).i() == 1)
z = barch.OrderedSet()
assert(z.add("z1",[],["1","one","2","two","3","three"]).i() == 3)
assert(z.range("z1",1.99,3.01,[])[0].s() == "two")
assert(z.range("z1",1.99,3.01,["WITHSCORES"])[1].d() == 2)
assert(z.rank("z1",0, 2).i() == 1)
assert(z.card("z1").i() == 3)

assert(z.add("z2", ["1","one","2","two","5","five"]).i() == 3)
assert(z.diff(["z1","z2"])[0].s()=="three")
assert(z.diff(["z2","z1"])[0].s()=="five")
assert(z.inter(["z2","z1"])[0].s()=="one")
assert(z.intercard(["z2","z1"]).i()==2)
assert(z.diffstore("z1.2",["z1","z2"]).i()==1)
assert(z.diffstore("z2.1",["z2","z1"]).i()==1)
assert(z.card("z2.1").i() == 1)

assert(z.popmin("z1").i() == 1)
assert(z.card("z1").i() == 2)
assert(z.range("z1",1.99,3.01,["WITHSCORES"])[1].d() == 2)
assert(z.popmax("z1").i() == 3)
assert(z.range("z1",1.99,3.01,["WITHSCORES"])[1].d() == 2)
s = barch.size()
assert(z.remove("z1","1").i() == 1)
assert(barch.size() + 1 == s)

assert(z.add("zi", ["1","one","2","two","5","five"]).i() == 3)
s = barch.size()
z.incrby("zi",11,"one")
assert(z.range("zi", 0,10)[0].s()=="two")
assert(z.card("zi").i()==3)
assert(z.range("zi", 10.5, 20)[0].s()=="one")

assert (s==barch.size())
barch.save()
assert(z.remrangebylex("zi", "ona", "ond").s()=="0")
assert(z.remrangebylex("zi", "ona", "onf").s()=="1")
assert(z.remrangebylex("zi", "tw", "two").s()=="1")
assert (s==barch.size()+4)
